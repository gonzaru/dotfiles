# don't display the welcome page
startup_message off

# don't log new windows to utmp
deflogin off

# turns off runtime debugging
debug off

# automatically detach on terminal hangup
autodetach on

# don't block the whole session if a window becomes unresponsible
defnonblock on

# ignore case on searches in copy-mode
ignorecase on

# UTF-8 encoding
defencoding UTF-8
defutf8 on

# disable visual bell
vbell off

# disable flow (xon, xoff)
defflow off

# disable multiuser mode (terminal sharing)
multiuser off

# default is 100
defscrollback 10000

# allows to switch region focus clicking with a mouse
# defmousetrack on

# alternative screen (vim & others)
altscreen on

# 256-color palette support
term screen-256color

# (firstline, lastline alwaysfirstline, alwayslastline)
# don't show status bar
hardstatus ignore

# remove text but keep the window divider
caption string " "

# inside screen <ESC> timeout (vim & others)
maptimeout 5

# show the message one second (default is 5)
msgwait 1

# scroll with mouse
termcapinfo xterm* ti@:te@

#  change window titlte if the correct escape sequence exists
defdynamictitle on

# autorename window (see PROMPT_COMMAND in ~/.bashrc)
shelltitle "$ |bash"

# shell as login shell
shell -${SHELL}

# erase background with current bg color (screen-256color-bce)
defbce on

# suppress trailing blank lines when scrolling
# compacthist on

# the capitalized versions of the letter specify bright colors
# K bright black background
# W bright white foreground
rendition so = KW

# defescape is ^Aa
# (C-a q) is default key for (xon). (C-q q) it will send C-q to the terminal
escape "^Qq"

# reload configuration
bind U eval "source ${HOME}/.screenrc" "echo 'Config reloaded!'"

# focus next/prev region (default is tab)
bind o eval "focus next"
bind ; eval "focus prev"

# region class (movement, resize)
bind R command -c myregion

# move regions
bind -c myregion h eval "focus left" "command -c myregion"
bind -c myregion l eval "focus right" "command -c myregion"
bind -c myregion k eval "focus up" "command -c myregion"
bind -c myregion j eval "focus down" "command -c myregion"

# resize regions
bind -c myregion H eval "resize -h -5" "command -c myregion"
bind -c myregion L eval "resize -h +5" "command -c myregion"
bind -c myregion K eval "resize -v +5" "command -c myregion"
bind -c myregion J eval "resize -v -5" "command -c myregion"
bind -c myregion | eval "resize -l max" "command -c myregion"
bind -c myregion = eval "resize -l =" "command -c myregion"

# layout class (conflicts with default login utmp key <C-a L>)
bind L command -c mylayout
bind -c mylayout c eval "layout new" "command -c mylayout" "echo 'Layout created'"
bind -c mylayout n eval "layout next" "command -c mylayout"
bind -c mylayout p eval "layout prev" "command -c mylayout"
bind -c mylayout d eval "layout remove" "command -c mylayout" "echo 'Layout removed!'"
bind -c mylayout w eval "command -c mylayout" "layout show"
bind -c mylayout "'" eval "command -c mylayout" "layout select"
bind -c mylayout N eval "command -c mylayout" "layout title"
bind -c mylayout a eval "command -c mylayout" "layout attach"
bind -c mylayout 0 eval "layout select 0" "command -c mylayout" "layout title"
bind -c mylayout 1 eval "layout select 1" "command -c mylayout" "layout title"
bind -c mylayout 2 eval "layout select 2" "command -c mylayout" "layout title"
bind -c mylayout 3 eval "layout select 3" "command -c mylayout" "layout title"
bind -c mylayout 4 eval "layout select 4" "command -c mylayout" "layout title"
bind -c mylayout 5 eval "layout select 5" "command -c mylayout" "layout title"
bind -c mylayout 6 eval "layout select 6" "command -c mylayout" "layout title"
bind -c mylayout 7 eval "layout select 7" "command -c mylayout" "layout title"
bind -c mylayout 8 eval "layout select 8" "command -c mylayout" "layout title"
bind -c mylayout 9 eval "layout select 9" "command -c mylayout" "layout title"

# split horizontally, focus and create a new shell
bind C eval split 'focus down' screen
bind '^' eval split 'focus down' other 'focus up' screen

# split vertically, focus and create a new shell
bind V eval 'split -v' 'focus right' screen
bind % eval 'split -v' 'focus right' other 'focus left' screen

# kill the region and the window at the same time
bind & eval kill remove

# copy to clipboard and primary
bind Y eval "writebuf" "exec sh -c '[ $(uname -s) = "Darwin" ] && [ -z $X11_PREFS_DOMAIN ] && pbcopy < /tmp/screen-exchange && exit 0 || [ -n $DISPLAY ] && xsel -bi < /tmp/screen-exchange && xsel -bo | xsel -pi'"

# paste from clipboard
bind P exec sh -c '[ $(uname -s) = "Darwin" ] && [ -z $X11_PREFS_DOMAIN ] && pbpaste > /tmp/screen-exchange && screen -X readbuf && exit 0 || [ -n $DISPLAY ] && xsel -bo > /tmp/screen-exchange && screen -X readbuf'

# limit the total number of windows created
# maxwin 10

# save regions automatically
# layout autosave on

# start with a new layout (none by default)
# layout new default
# layout save default

# window manager layout
bind T eval "exec sh -c 'screen-wm'"
# 15 enter, 177 backspace
bind "\15" eval "exec sh -c 'screen-swap'"
bind "\177" eval "exec sh -c 'screen-rotate'"

# load local config
# source "$HOME/.screenrc.local"
